{"remainingRequest":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-fontawesome/src/fa.directive.js","dependencies":[{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-fontawesome/src/fa.directive.js","mtime":1518026327000},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/cache-loader/dist/cjs.js","mtime":1533011384028},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar FaDirective = /*@__PURE__*/ (function () {\n    function FaDirective(el) {\n        this.el = el.nativeElement;\n        this.el.classList.add('fa');\n    }\n    FaDirective.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            var previousValue = changes[key].previousValue;\n            var currentValue = changes[key].currentValue;\n            switch (key) {\n                case 'name':\n                    if (typeof previousValue === 'string') {\n                        this.el.classList.remove(\"fa-\" + previousValue);\n                    }\n                    this.el.classList.add(\"fa-\" + currentValue);\n                    break;\n                case 'alt':\n                    // TODO(Write code for the alt parameter)\n                    break;\n                case 'size':\n                    if (FaDirective.sizeValidator.test(currentValue)) {\n                        if (previousValue === 1) {\n                            this.el.classList.remove('fa-lg');\n                        }\n                        else if (typeof previousValue === 'string') {\n                            this.el.classList.remove(\"fa-\" + previousValue + \"x\");\n                        }\n                        if (currentValue === 1) {\n                            this.el.classList.add('fa-lg');\n                        }\n                        else {\n                            this.el.classList.add(\"fa-\" + currentValue + \"x\");\n                        }\n                    }\n                    break;\n                case 'stack':\n                    if (FaDirective.sizeValidator.test(currentValue)) {\n                        if (typeof previousValue === 'string') {\n                            this.el.classList.remove(\"fa-stack-\" + previousValue + \"x\");\n                        }\n                        this.el.classList.add(\"fa-stack-\" + currentValue + \"x\");\n                    }\n                    break;\n                case 'flip':\n                    if (FaDirective.flipValidator.test(currentValue)) {\n                        if (typeof previousValue === 'string') {\n                            this.el.classList.remove(\"fa-flip-\" + previousValue);\n                        }\n                        this.el.classList.add(\"fa-flip-\" + currentValue);\n                    }\n                    break;\n                case 'pull':\n                    if (FaDirective.pullValidator.test(currentValue)) {\n                        if (typeof previousValue === 'string') {\n                            this.el.classList.remove(\"fa-pull-\" + previousValue);\n                        }\n                        this.el.classList.add(\"fa-pull-\" + currentValue);\n                    }\n                    break;\n                case 'rotate':\n                    if (FaDirective.rotateValidator.test(currentValue)) {\n                        if (typeof previousValue === 'string') {\n                            this.el.classList.remove(\"fa-rotate-\" + previousValue);\n                        }\n                        this.el.classList.add(\"fa-rotate-\" + currentValue);\n                    }\n                    break;\n                case 'border':\n                    if (currentValue) {\n                        this.el.classList.add('fa-border');\n                    }\n                    else if (typeof previousValue === 'string') {\n                        this.el.classList.remove('fa-border');\n                    }\n                    break;\n                case 'spin':\n                    if (currentValue) {\n                        this.el.classList.add('fa-spin');\n                    }\n                    else if (typeof previousValue === 'string') {\n                        this.el.classList.remove('fa-spin');\n                    }\n                    break;\n                case 'fw':\n                    if (currentValue) {\n                        this.el.classList.add('fa-fw');\n                    }\n                    else if (typeof previousValue === 'string') {\n                        this.el.classList.remove('fa-fw');\n                    }\n                    break;\n                case 'inverse':\n                    if (currentValue) {\n                        this.el.classList.add('fa-inverse');\n                    }\n                    else if (typeof previousValue === 'string') {\n                        this.el.classList.remove('fa-inverse');\n                    }\n                    break;\n            }\n        }\n    };\n    FaDirective.sizeValidator = /[1-5]/;\n    FaDirective.flipValidator = /['horizontal'|'vertical']/;\n    FaDirective.pullValidator = /['right'|'left']/;\n    FaDirective.rotateValidator = /[90|180|270]/;\n    FaDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: '[fa]',\n                    inputs: ['name', 'alt', 'size', 'stack', 'flip', 'pull', 'rotate', 'border', 'spin', 'fw', 'inverse']\n                },] },\n    ];\n    return FaDirective;\n}());\nexports.FaDirective = FaDirective;\n",null]}