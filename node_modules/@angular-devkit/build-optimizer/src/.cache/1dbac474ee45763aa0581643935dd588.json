{"remainingRequest":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-select/dist/option-list.js","dependencies":[{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-select/dist/option-list.js","mtime":1486838706000},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/cache-loader/dist/cjs.js","mtime":1533011384028},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar option_1 = require('./option');\nvar diacritics_1 = require('./diacritics');\nvar OptionList = /*@__PURE__*/ (function () {\n    function OptionList(options) {\n        /* Consider using these for performance improvement. */\n        // private _selection: Array<Option>;\n        // private _filtered: Array<Option>;\n        // private _value: Array<string>;\n        this._highlightedOption = null;\n        if (typeof options === 'undefined' || options === null) {\n            options = [];\n        }\n        this._options = options.map(function (option) {\n            var o = new option_1.Option(option.value, option.label);\n            if (option.disabled) {\n                o.disable();\n            }\n            return o;\n        });\n        this._hasShown = this._options.length > 0;\n        this.highlight();\n    }\n    Object.defineProperty(OptionList.prototype, \"options\", {\n        /** Options. **/\n        get: function () {\n            return this._options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OptionList.prototype.getOptionsByValue = function (value) {\n        return this.options.filter(function (option) {\n            return option.value === value;\n        });\n    };\n    Object.defineProperty(OptionList.prototype, \"value\", {\n        /** Value. **/\n        get: function () {\n            return this.selection.map(function (selectedOption) {\n                return selectedOption.value;\n            });\n        },\n        set: function (v) {\n            v = typeof v === 'undefined' || v === null ? [] : v;\n            this.options.forEach(function (option) {\n                option.selected = v.indexOf(option.value) > -1;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OptionList.prototype, \"selection\", {\n        /** Selection. **/\n        get: function () {\n            return this.options.filter(function (option) {\n                return option.selected;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OptionList.prototype.select = function (option, multiple) {\n        if (!multiple) {\n            this.clearSelection();\n        }\n        option.selected = true;\n    };\n    OptionList.prototype.deselect = function (option) {\n        option.selected = false;\n    };\n    OptionList.prototype.clearSelection = function () {\n        this.options.forEach(function (option) {\n            option.selected = false;\n        });\n    };\n    Object.defineProperty(OptionList.prototype, \"filtered\", {\n        /** Filter. **/\n        get: function () {\n            return this.options.filter(function (option) {\n                return option.shown;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OptionList.prototype.filter = function (term) {\n        var anyShown = false;\n        if (term.trim() === '') {\n            this.resetFilter();\n            anyShown = this.options.length > 0;\n        }\n        else {\n            this.options.forEach(function (option) {\n                var l = diacritics_1.Diacritics.strip(option.label).toUpperCase();\n                var t = diacritics_1.Diacritics.strip(term).toUpperCase();\n                option.shown = l.indexOf(t) > -1;\n                if (option.shown) {\n                    anyShown = true;\n                }\n            });\n        }\n        var toEmpty = this.hasShown && !anyShown;\n        this.highlight();\n        this._hasShown = anyShown;\n        return toEmpty;\n    };\n    OptionList.prototype.resetFilter = function () {\n        this.options.forEach(function (option) {\n            option.shown = true;\n        });\n    };\n    Object.defineProperty(OptionList.prototype, \"highlightedOption\", {\n        /** Highlight. **/\n        get: function () {\n            return this._highlightedOption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OptionList.prototype.highlight = function () {\n        var option = this.hasShownSelected() ?\n            this.getFirstShownSelected() : this.getFirstShown();\n        this.highlightOption(option);\n    };\n    OptionList.prototype.highlightOption = function (option) {\n        this.clearHighlightedOption();\n        if (option !== null) {\n            option.highlighted = true;\n            this._highlightedOption = option;\n        }\n    };\n    OptionList.prototype.highlightNextOption = function () {\n        var shownOptions = this.filtered;\n        var index = this.getHighlightedIndexFromList(shownOptions);\n        if (index > -1 && index < shownOptions.length - 1) {\n            this.highlightOption(shownOptions[index + 1]);\n        }\n    };\n    OptionList.prototype.highlightPreviousOption = function () {\n        var shownOptions = this.filtered;\n        var index = this.getHighlightedIndexFromList(shownOptions);\n        if (index > 0) {\n            this.highlightOption(shownOptions[index - 1]);\n        }\n    };\n    OptionList.prototype.clearHighlightedOption = function () {\n        if (this.highlightedOption !== null) {\n            this.highlightedOption.highlighted = false;\n            this._highlightedOption = null;\n        }\n    };\n    OptionList.prototype.getHighlightedIndexFromList = function (options) {\n        for (var i = 0; i < options.length; i++) {\n            if (options[i].highlighted) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    OptionList.prototype.getHighlightedIndex = function () {\n        return this.getHighlightedIndexFromList(this.filtered);\n    };\n    Object.defineProperty(OptionList.prototype, \"hasShown\", {\n        /** Util. **/\n        get: function () {\n            return this._hasShown;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OptionList.prototype.hasSelected = function () {\n        return this.options.some(function (option) {\n            return option.selected;\n        });\n    };\n    OptionList.prototype.hasShownSelected = function () {\n        return this.options.some(function (option) {\n            return option.shown && option.selected;\n        });\n    };\n    OptionList.prototype.getFirstShown = function () {\n        for (var _i = 0, _a = this.options; _i < _a.length; _i++) {\n            var option = _a[_i];\n            if (option.shown) {\n                return option;\n            }\n        }\n        return null;\n    };\n    OptionList.prototype.getFirstShownSelected = function () {\n        for (var _i = 0, _a = this.options; _i < _a.length; _i++) {\n            var option = _a[_i];\n            if (option.shown && option.selected) {\n                return option;\n            }\n        }\n        return null;\n    };\n    // v0 and v1 are assumed not to be undefined or null.\n    OptionList.equalValues = function (v0, v1) {\n        if (v0.length !== v1.length) {\n            return false;\n        }\n        var a = v0.slice().sort();\n        var b = v1.slice().sort();\n        return a.every(function (v, i) {\n            return v === b[i];\n        });\n    };\n    return OptionList;\n}());\nexports.OptionList = OptionList;\n",null]}