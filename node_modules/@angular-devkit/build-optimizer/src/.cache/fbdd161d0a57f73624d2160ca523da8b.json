{"remainingRequest":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-select/dist/select-dropdown.component.js","dependencies":[{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-select/dist/select-dropdown.component.js","mtime":1486838706000},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/cache-loader/dist/cjs.js","mtime":1533011384028},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require('@angular/core');\nvar select_dropdown_component_css_1 = require('./select-dropdown.component.css');\nvar select_dropdown_component_html_1 = require('./select-dropdown.component.html');\nvar SelectDropdownComponent = /*@__PURE__*/ (function () {\n    function SelectDropdownComponent() {\n        this.close = new core_1.EventEmitter();\n        this.optionClicked = new core_1.EventEmitter();\n        this.singleFilterClick = new core_1.EventEmitter();\n        this.singleFilterInput = new core_1.EventEmitter();\n        this.singleFilterKeydown = new core_1.EventEmitter();\n        this.disabledColor = '#fff';\n        this.disabledTextColor = '9e9e9e';\n    }\n    /** Event handlers. **/\n    // Angular life cycle hooks.\n    SelectDropdownComponent.prototype.ngOnInit = function () {\n        this.optionsReset();\n    };\n    SelectDropdownComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.hasOwnProperty('optionList')) {\n            this.optionsReset();\n        }\n    };\n    SelectDropdownComponent.prototype.ngAfterViewInit = function () {\n        this.moveHighlightedIntoView();\n        if (!this.multiple && this.filterEnabled) {\n            this.filterInput.nativeElement.focus();\n        }\n    };\n    // Filter input (single select).\n    SelectDropdownComponent.prototype.onSingleFilterClick = function (event) {\n        this.singleFilterClick.emit(null);\n    };\n    SelectDropdownComponent.prototype.onSingleFilterInput = function (event) {\n        this.singleFilterInput.emit(event.target.value);\n    };\n    SelectDropdownComponent.prototype.onSingleFilterKeydown = function (event) {\n        this.singleFilterKeydown.emit(event);\n    };\n    // Options list.\n    SelectDropdownComponent.prototype.onOptionsWheel = function (event) {\n        this.handleOptionsWheel(event);\n    };\n    SelectDropdownComponent.prototype.onOptionMouseover = function (option) {\n        this.optionList.highlightOption(option);\n    };\n    SelectDropdownComponent.prototype.onOptionClick = function (option) {\n        this.optionClicked.emit(option);\n    };\n    /** Initialization. **/\n    SelectDropdownComponent.prototype.optionsReset = function () {\n        this.optionList.filter('');\n        this.optionList.highlight();\n    };\n    /** View. **/\n    SelectDropdownComponent.prototype.getOptionStyle = function (option) {\n        if (option.highlighted) {\n            var style = {};\n            if (typeof this.highlightColor !== 'undefined') {\n                style['background-color'] = this.highlightColor;\n            }\n            if (typeof this.highlightTextColor !== 'undefined') {\n                style['color'] = this.highlightTextColor;\n            }\n            return style;\n        }\n        else {\n            return {};\n        }\n    };\n    SelectDropdownComponent.prototype.clearFilterInput = function () {\n        if (this.filterEnabled) {\n            this.filterInput.nativeElement.value = '';\n        }\n    };\n    SelectDropdownComponent.prototype.moveHighlightedIntoView = function () {\n        var list = this.optionsList.nativeElement;\n        var listHeight = list.offsetHeight;\n        var itemIndex = this.optionList.getHighlightedIndex();\n        if (itemIndex > -1) {\n            var item = list.children[0].children[itemIndex];\n            var itemHeight = item.offsetHeight;\n            var itemTop = itemIndex * itemHeight;\n            var itemBottom = itemTop + itemHeight;\n            var viewTop = list.scrollTop;\n            var viewBottom = viewTop + listHeight;\n            if (itemBottom > viewBottom) {\n                list.scrollTop = itemBottom - listHeight;\n            }\n            else if (itemTop < viewTop) {\n                list.scrollTop = itemTop;\n            }\n        }\n    };\n    SelectDropdownComponent.prototype.handleOptionsWheel = function (e) {\n        var div = this.optionsList.nativeElement;\n        var atTop = div.scrollTop === 0;\n        var atBottom = div.offsetHeight + div.scrollTop === div.scrollHeight;\n        if (atTop && e.deltaY < 0) {\n            e.preventDefault();\n        }\n        else if (atBottom && e.deltaY > 0) {\n            e.preventDefault();\n        }\n    };\n    SelectDropdownComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'select-dropdown',\n                    template: select_dropdown_component_html_1.TEMPLATE,\n                    styles: [select_dropdown_component_css_1.STYLE],\n                    encapsulation: core_1.ViewEncapsulation.None\n                },] },\n    ];\n    SelectDropdownComponent.propDecorators = {\n        'filterEnabled': [{ type: core_1.Input },],\n        'highlightColor': [{ type: core_1.Input },],\n        'highlightTextColor': [{ type: core_1.Input },],\n        'left': [{ type: core_1.Input },],\n        'multiple': [{ type: core_1.Input },],\n        'notFoundMsg': [{ type: core_1.Input },],\n        'optionList': [{ type: core_1.Input },],\n        'top': [{ type: core_1.Input },],\n        'width': [{ type: core_1.Input },],\n        'close': [{ type: core_1.Output },],\n        'optionClicked': [{ type: core_1.Output },],\n        'singleFilterClick': [{ type: core_1.Output },],\n        'singleFilterInput': [{ type: core_1.Output },],\n        'singleFilterKeydown': [{ type: core_1.Output },],\n        'filterInput': [{ type: core_1.ViewChild, args: ['filterInput',] },],\n        'optionsList': [{ type: core_1.ViewChild, args: ['optionsList',] },],\n    };\n    return SelectDropdownComponent;\n}());\nexports.SelectDropdownComponent = SelectDropdownComponent;\n",null]}