{"remainingRequest":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/ngx-page-scroll/src/ngx-page-scroll-config.js","dependencies":[{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/ngx-page-scroll/src/ngx-page-scroll-config.js","mtime":1509371973000},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/cache-loader/dist/cjs.js","mtime":1533011384028},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var EasingLogic = /*@__PURE__*/ (function () {\n    function EasingLogic() {\n    }\n    return EasingLogic;\n}());\nexport { EasingLogic };\nvar PageScrollConfig = /*@__PURE__*/ (function () {\n    function PageScrollConfig() {\n    }\n    Object.defineProperty(PageScrollConfig, \"defaultEasingLogic\", {\n        // Getter and setter to avoid auto completion to suggest calling the method\n        get: function () {\n            return PageScrollConfig._easingLogic;\n        },\n        set: function (easingLogic) {\n            PageScrollConfig._easingLogic = easingLogic;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The number of milliseconds to wait till updating the scroll position again.\n     * Small amounts may produce smoother animations but require more processing power.\n     * @type {number}\n     */\n    PageScrollConfig._interval = 10;\n    /**\n     * The amount of pixels that need to be between the current scrollTop/scrollLeft position\n     * and the target position the cause a scroll animation. In case distance is below\n     * this threshold, an immediate jump will be performed.\n     * Due to dpi or rounding irregularities in browsers floating point numbers for scrollTop/scrollLeft values\n     * are possible, making a === comparison of current scrollTop or scrollLeft and target scrollPosition error-prone.\n     * @type {number}\n     */\n    PageScrollConfig._minScrollDistance = 2;\n    /**\n     * Name of the default namespace.\n     * @type {string}\n     */\n    PageScrollConfig._defaultNamespace = 'default';\n    /**\n     * Whether by default the scrolling should happen in vertical direction (by manipulating the scrollTop property)\n     * (= true; default) or in horizontal direction (by manipulating the scrollLeft property) (= false\n     * @type {boolean}\n     */\n    PageScrollConfig.defaultIsVerticalScrolling = true;\n    /**\n     * How many console logs should be emitted. Also influenced by angular mode (dev or prod mode)\n     * 0: No logs, neither in dev nor in prod mode\n     * 1: Animation errors in dev mode, no logs in prod mode\n     * 2: Animation errors in dev and prod mode\n     * 5: Animation errors in dev and all scroll position values that get set; animation errors in prod mode\n     * @type {number}\n     */\n    PageScrollConfig._logLevel = 1;\n    /**\n     * The duration how long a scrollTo animation should last by default.\n     * May be overridden using the page-scroll-duration attribute on a single ngxPageScroll instance.\n     * @type {number}\n     */\n    PageScrollConfig.defaultDuration = 1250;\n    /**\n     * The distance in pixels above scroll target where the animation should stop. Setting a positive number results in\n     * the scroll target being more in the middle of the screen, negative numbers will produce scrolling \"too far\"\n     * @type {number}\n     */\n    PageScrollConfig.defaultScrollOffset = 0;\n    /**\n     * Whether by default for inline scroll animations the advanced offset calculation should take place (true) or\n     * not (false). Default is false.\n     * The advanced offset calculation will traverse the DOM tree upwards, starting at the scrollTarget, until it finds\n     * the scrollingView container element. Along the way the offset positions of the relative positioned\n     * (position: relative) elements will be taken into account for calculating the target elements position.\n     * @type {boolean}\n     */\n    PageScrollConfig.defaultAdvancedInlineOffsetCalculation = false;\n    /**\n     * The events that are listened to on the body to decide whether a scroll animation has been interfered/interrupted by the user\n     * @type {string[]}\n     */\n    PageScrollConfig._interruptEvents = ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'];\n    /**\n     * The keys that are considered to interrupt a scroll animation (mainly the arrow keys). All other key presses will not stop the\n     * scroll animation.\n     * @type {number[]}\n     */\n    PageScrollConfig._interruptKeys = [33, 34, 35, 36, 38, 40];\n    /**\n     * Whether a scroll animation should be interruptible by user interaction (true) or not (false). If the user performs an\n     * interrupting event while a scroll animation takes place, the scroll animation stops.\n     * @type {boolean}\n     */\n    PageScrollConfig.defaultInterruptible = true;\n    PageScrollConfig._easingLogic = {\n        ease: function (t, b, c, d) {\n            // Linear easing\n            return c * t / d + b;\n        }\n    };\n    return PageScrollConfig;\n}());\nexport { PageScrollConfig };\n",null]}