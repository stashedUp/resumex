{"remainingRequest":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-fontawesome/src/fa.component.js","dependencies":[{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-fontawesome/src/fa.component.js","mtime":1518026327000},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/cache-loader/dist/cjs.js","mtime":1533011384028},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar core_2 = require(\"@angular/core\");\nvar core_3 = require(\"@angular/core\");\nvar FA_COMPONENT_TEMPLATE = \"\\n  <i [ngClass]=\\\"classList\\\"></i>\\n\";\nvar FaComponent = /*@__PURE__*/ (function () {\n    function FaComponent(el) {\n        // TODO (travelist): Support for fa-li selector\n        // if (el.nativeElement.tagName == 'FA')\n        // else this.classList = ['fa', 'fa-li']\n        this.classList = ['fa'];\n    }\n    FaComponent.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            var previousValue = changes[key].previousValue;\n            var currentValue = changes[key].currentValue;\n            switch (key) {\n                case 'name':\n                    this.removeFaClass(\"fa-\" + previousValue);\n                    this.addFaClass(\"fa-\" + currentValue);\n                    break;\n                case 'alt':\n                    // TODO(travelist): Write code for the alt parameter\n                    break;\n                case 'size':\n                    if (FaComponent.sizeValidator.test(currentValue)) {\n                        if (previousValue === 1) {\n                            this.removeFaClass('fa-lg');\n                        }\n                        else {\n                            this.removeFaClass(\"fa-\" + previousValue + \"x\");\n                        }\n                        if (currentValue === 1) {\n                            this.classList.push('fa-lg');\n                        }\n                        else {\n                            this.classList.push(\"fa-\" + currentValue + \"x\");\n                        }\n                    }\n                    break;\n                case 'stack':\n                    if (FaComponent.sizeValidator.test(currentValue)) {\n                        this.removeFaClass(\"fa-stack-\" + previousValue + \"x\");\n                        this.addFaClass(\"fa-stack-\" + currentValue + \"x\");\n                    }\n                    break;\n                case 'flip':\n                    if (FaComponent.flipValidator.test(currentValue)) {\n                        this.removeFaClass(\"fa-flip-\" + previousValue);\n                        this.addFaClass(\"fa-flip-\" + currentValue);\n                    }\n                    break;\n                case 'pull':\n                    if (FaComponent.pullValidator.test(currentValue)) {\n                        this.removeFaClass(\"fa-pull-\" + previousValue);\n                        this.addFaClass(\"fa-pull-\" + currentValue);\n                    }\n                    break;\n                case 'rotate':\n                    if (FaComponent.rotateValidator.test(currentValue)) {\n                        this.removeFaClass(\"fa-rotate-\" + previousValue);\n                        this.addFaClass(\"fa-rotate-\" + currentValue);\n                    }\n                    break;\n                case 'border':\n                    if (currentValue) {\n                        this.addFaClass('fa-border');\n                    }\n                    else {\n                        this.removeFaClass('fa-border');\n                    }\n                    break;\n                case 'spin':\n                    if (currentValue) {\n                        this.addFaClass('fa-spin');\n                    }\n                    else {\n                        this.removeFaClass('fa-spin');\n                    }\n                    break;\n                case 'fw':\n                    if (currentValue) {\n                        this.addFaClass('fa-fw');\n                    }\n                    else {\n                        this.removeFaClass('fa-fw');\n                    }\n                    break;\n                case 'inverse':\n                    if (currentValue) {\n                        this.addFaClass('fa-inverse');\n                    }\n                    else {\n                        this.removeFaClass('fa-inverse');\n                    }\n                    break;\n            }\n        }\n    };\n    FaComponent.prototype.addFaClass = function (className) {\n        // better to check uniqueness\n        this.classList.push(className);\n    };\n    FaComponent.prototype.removeFaClass = function (className) {\n        var index;\n        if ((index = this.classList.indexOf(className)) >= 0) {\n            this.classList.splice(index, 1);\n        }\n    };\n    FaComponent.sizeValidator = /[1-5]/;\n    FaComponent.flipValidator = /['horizontal'|'vertical']/;\n    FaComponent.pullValidator = /['right'|'left']/;\n    FaComponent.rotateValidator = /[90|180|270]/;\n    FaComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'fa',\n                    template: FA_COMPONENT_TEMPLATE\n                },] },\n    ];\n    FaComponent.propDecorators = {\n        'name': [{ type: core_3.Input },],\n        'alt': [{ type: core_3.Input },],\n        'size': [{ type: core_3.Input },],\n        'stack': [{ type: core_3.Input },],\n        'flip': [{ type: core_3.Input },],\n        'pull': [{ type: core_3.Input },],\n        'rotate': [{ type: core_3.Input },],\n        'border': [{ type: core_3.Input },],\n        'spin': [{ type: core_3.Input },],\n        'fw': [{ type: core_3.Input },],\n        'inverse': [{ type: core_3.Input },],\n    };\n    return FaComponent;\n}());\nexports.FaComponent = FaComponent;\n",null]}