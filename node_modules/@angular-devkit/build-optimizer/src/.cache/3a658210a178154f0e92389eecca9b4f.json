{"remainingRequest":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-auth/dist/token.model.js","dependencies":[{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/angular2-auth/dist/token.model.js","mtime":1495973774000},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/cache-loader/dist/cjs.js","mtime":1533011384028},{"path":"/Users/warrenveerasingam/KeplersBox/ResumeX/resumex-fe/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright (C) 2016 Dizzy <itsdizzy40@gmail.com>\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TokenError = /*@__PURE__*/ (function (_super) {\n    __extends(TokenError, _super);\n    function TokenError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"TokenError\";\n        return _this;\n    }\n    return TokenError;\n}(Error));\nexports.TokenError = TokenError;\nvar Token = /*@__PURE__*/ (function () {\n    function Token(token) {\n        this.token = token;\n    }\n    Token.prototype.decodeBase64 = function (str) {\n        var output = str.replace(/-/g, '+')\n            .replace(/_/g, '/');\n        switch (output.length % 4) {\n            case 0: {\n                break;\n            }\n            case 2: {\n                output += '==';\n                break;\n            }\n            case 3: {\n                output += '=';\n                break;\n            }\n            default: {\n                throw new TokenError('Illegal base64url string!');\n            }\n        }\n        return decodeURIComponent(escape(typeof window === 'undefined' ? atob(output) : window.atob(output)));\n    };\n    Token.prototype.decodeToken = function () {\n        var parts = this.token.split('.');\n        if (parts.length !== 3) {\n            throw new TokenError('A JWT Token must have 3 parts!');\n        }\n        var decoded = this.decodeBase64(parts[1]);\n        if (!decoded) {\n            throw new TokenError('Cannot decode the token!');\n        }\n        return JSON.parse(decoded);\n    };\n    /**\n     * Gets the expiration date of this token.\n     */\n    Token.prototype.getExpirationDate = function () {\n        var decoded = this.decodeToken();\n        if (!decoded.hasOwnProperty('exp')) {\n            return new Date();\n        }\n        var date = new Date(0);\n        date.setUTCSeconds(decoded.exp);\n        return date;\n    };\n    /**\n     * Check whether the token has been expired already.\n     */\n    Token.prototype.isExpired = function (offsetSeconds) {\n        if (offsetSeconds === void 0) {\n            offsetSeconds = 0;\n        }\n        var date = this.getExpirationDate();\n        if (date.getSeconds() === new Date().getSeconds()) {\n            return false;\n        }\n        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n    };\n    return Token;\n}());\nexports.Token = Token;\n",null]}