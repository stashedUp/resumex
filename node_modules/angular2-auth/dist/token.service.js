/**
 * @license
 * Copyright (C) 2016 Dizzy <itsdizzy40@gmail.com>
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var token_model_1 = require("./token.model");
var rxjs_1 = require("rxjs");
var TokenService = (function () {
    function TokenService() {
        this._token = new rxjs_1.BehaviorSubject(new token_model_1.Token(localStorage.getItem('auth_token')));
    }
    /**
     * Get the current token.
     */
    TokenService.prototype.getToken = function () {
        return this._token.getValue();
    };
    /**
     * Returns an stream of tokens.
     */
    TokenService.prototype.getTokenStream = function () {
        return this._token.asObservable();
    };
    /**
     * Update the current token.
     */
    TokenService.prototype.setToken = function (token) {
        this._token.next(new token_model_1.Token(token));
        localStorage.setItem('auth_token', token);
    };
    /**
     * Remove the current token.
     */
    TokenService.prototype.removeToken = function () {
        this._token.next(null);
        localStorage.removeItem('auth_token');
    };
    return TokenService;
}());
TokenService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], TokenService);
exports.TokenService = TokenService;
//# sourceMappingURL=token.service.js.map