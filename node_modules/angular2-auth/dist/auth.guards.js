/**
 * @license
 * Copyright (C) 2016 Dizzy <itsdizzy40@gmail.com>
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var auth_config_1 = require("./auth.config");
var token_service_1 = require("./token.service");
/**
 * A simple guard that checks whether you are logged in.
 */
var LoggedInAuthGuard = (function () {
    function LoggedInAuthGuard(options, _tokenService, _router) {
        this._tokenService = _tokenService;
        this._router = _router;
        this._config = options.getConfig();
    }
    /**
     * Checks if the user is logged in by checking
     * the expiration date of the token.
     */
    LoggedInAuthGuard.prototype.canActivate = function () {
        var token = this._tokenService.getToken();
        // Sometimes we will have a token that is equal to null,
        // a quick fix for this is to check if the token is set
        // after that we can just check if its expired yes/no
        if (token && token.token) {
            return !token.isExpired();
        }
        // If the redirectUrl for this guard is set lets redirect to that url.
        var redirectUrl = this._config.guards.loggedInGuard.redirectUrl;
        if (redirectUrl) {
            this._router.navigate([redirectUrl]);
        }
        // In all other cases we are not logged in so lets return false.
        return false;
    };
    return LoggedInAuthGuard;
}());
LoggedInAuthGuard = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [auth_config_1.AuthConfig, token_service_1.TokenService, router_1.Router])
], LoggedInAuthGuard);
exports.LoggedInAuthGuard = LoggedInAuthGuard;
/**
 * A simple guard that checks whether you are logged out.
 */
var LoggedOutAuthGuard = (function () {
    function LoggedOutAuthGuard(options, _tokenService, _router) {
        this._tokenService = _tokenService;
        this._router = _router;
        this._config = options.getConfig();
    }
    /**
     * Checks if the user is logged in by checking
     * the expiration date of the token.
     */
    LoggedOutAuthGuard.prototype.canActivate = function () {
        var token = this._tokenService.getToken();
        // Sometimes we will have a token that is equal to null,
        // a quick fix for this is to check if the token is set
        // after that we can just check if its expired yes/no
        if (token && token.token && !token.isExpired()) {
            // If the redirectUrl for this guard is set lets redirect to that url.
            var redirectUrl = this._config.guards.loggedOutGuard.redirectUrl;
            if (redirectUrl) {
                this._router.navigate([redirectUrl]);
            }
            return false;
        }
        // In all other cases we are logged out so lets return true.
        return true;
    };
    return LoggedOutAuthGuard;
}());
LoggedOutAuthGuard = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [auth_config_1.AuthConfig, token_service_1.TokenService, router_1.Router])
], LoggedOutAuthGuard);
exports.LoggedOutAuthGuard = LoggedOutAuthGuard;
//# sourceMappingURL=auth.guards.js.map