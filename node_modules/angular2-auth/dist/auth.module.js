/**
 * @license
 * Copyright (C) 2016 Dizzy <itsdizzy40@gmail.com>
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var http_1 = require("@angular/http");
var router_1 = require("@angular/router");
var auth_config_1 = require("./auth.config");
var token_service_1 = require("./token.service");
var auth_http_1 = require("./auth.http");
var AuthModule = AuthModule_1 = (function () {
    function AuthModule() {
    }
    AuthModule.forRoot = function (config) {
        return {
            ngModule: AuthModule_1,
            providers: [
                token_service_1.TokenService,
                {
                    provide: auth_http_1.AuthHttp,
                    useFactory: provideAuthHttp,
                    deps: [
                        token_service_1.TokenService,
                        http_1.Http,
                        http_1.RequestOptions
                    ]
                }
            ]
        };
    };
    return AuthModule;
}());
AuthModule = AuthModule_1 = __decorate([
    core_1.NgModule({
        imports: [
            common_1.CommonModule,
            http_1.HttpModule,
            router_1.RouterModule
        ]
    })
], AuthModule);
exports.AuthModule = AuthModule;
function provideAuthHttp(config, tokenService, http, options) {
    return new auth_http_1.AuthHttp(new auth_config_1.AuthConfig(config), tokenService, http, options);
}
exports.provideAuthHttp = provideAuthHttp;
var AuthModule_1;
//# sourceMappingURL=auth.module.js.map